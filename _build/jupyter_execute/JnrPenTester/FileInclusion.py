#!/usr/bin/env python
# coding: utf-8

# # File Inclusion
# 
# 
# ### Task 8 Challenge
# I'm starting with the challenges, as the rest is already walked through in the tasks. No guidance on this one though
# 
# #### Flag1
# ![JrPen-FileInclusion_task1.png](../images/JrPen-FileInclusion_task1.png)
# 
# OK, so the form is broken. If we take a quick look at the source, it's a get request instead of a POST... smart
# ![JrPen-FileInclusion_GET.png](../images/JrPen-FileInclusion_GET.png)
# 
# If we can't use the built in form, theres a few ways around this. The first thing that came to mind was CURL. A quick, easy way to send a request...
# 
# A quick google for the format and I ended up with the below command
# 
# ![JrPen-FileInclusion_Curl.png](../images/JrPen-FileInclusion_Curl.png)
# 
# * -X: The Type of Request
# * -F: A Field=Value string
# * the last string is my target (no flag)
# 
# Those of you playing along at home may wonder why I have 4 "up-one-level" in the path. The simple answer is it was an educated guess. If the are asking for /etc/ then we're on a linux box. Linux tends to host in /var/www/html, so 3 would be fine. One of the great things about trying to access a directory by 'returning' to the root directory, is that even if you overshoot how many levels up you need to go, extras just put you in the exact same spot.
# 
# Finally and see what we get. Scrolling to the bottom of the response, we have a code.... huh. It seems we have found our flag
# 
# ![JrPen-FileInclusion_CurlResponse.png](../images/JrPen-FileInclusion_CurlResponse.png)
# 
# If we had gotten it wrong, we can also see the directory passed back by the webpage. It was the default directory so 3 would have been enough.
# 
# The hints recommend Burp or Fixing the page source, whatever method works for you :-)
# 
# <hr>
# 
# 

# #### Flag2
# 
# So... We are told to refresh then get this page
# 
# ![JrPen-FileInclusion_task2.png](../images/JrPen-FileInclusion_task2.png)
# 
# Huh... refresh then we arent allowed in... Did someone say cookies?
# Lets take a look at our dev tools
# ![JrPen-FileInclusion_cookieBefore.png](../images/JrPen-FileInclusion_cookieBefore.png)
# 
# Now, guest sounds kinda boring dont you think? Lets try shake things up as an admin....
# 
# ![JrPen-FileInclusion_cookieAfter.png](../images/JrPen-FileInclusion_cookieAfter.png)
# 
# Close the Dev tools and refresh.
# ![JrPen-FileInclusion_cookieAdmin.png](../images/JrPen-FileInclusion_cookieAdmin.png)
# 
# Now, isnt that more interesting :-)
# 
# 
# ... but wait, theres more. Where's the input? And we have some exceptions.
# ![JrnPen-FileInclusion_AdminFile.png](../images/JrnPen-FileInclusion_AdminFile.png)
# 
# It looks like that cookie might not be for an account name. It looks to be our file location... Let's try that out...
# 
# ![JrnPen-FileInclusion_phpext.png](../images/JrnPen-FileInclusion_phpext.png)
# 
# It looks right, but we arent getting a file. You may notice the first exception has an error "No such file or directory". The path has a .php added to the end. That's not what we wanted. As we didnt add it, it likely added by the website. We've seen how to escape this before, by adding the null character at the end (%00). Lets give that a go.
# 
# ![JrnPen-FileInclusion_Flag2.png](../images/JrnPen-FileInclusion_Flag2.png)
# 
# Great! We have our flag. A good takeaway from this is "just because the cookie looks like an account name, doesnt mean it is".

# In[ ]:




